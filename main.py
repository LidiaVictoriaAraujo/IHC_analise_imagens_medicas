import streamlit as st
import time
import datetime
from PIL import Image
from streamlit_option_menu import option_menu

# ========== CONFIG GERAL ==========
st.set_page_config(page_title="MediVis√£o", page_icon="üß¨", layout="wide")
st.markdown("""
    <style>

    @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&family=Raleway:ital,wght@0,100..900;1,100..900&display=swap');
       
    .main {
        background-color: #FAF6EF;
        font-family: 'Quicksand', 'Segoe UI', sans-serif;
        font-optical-sizing: auto;
        font-weight: <weight>;
        font-style: normal;
        font-size: "18px"
    }

    html, body, [class*="css"] {
        font-family: 'Quicksand', 'Segoe UI', sans-serif;
        font-optical-sizing: auto;
        font-weight: <weight>;
        font-style: normal;
    }

    [data-testid="stSidebar"] {
        background-color: #7DA584;
    }

    h1, h2, h3 {
        color: #214c38;
        font-family: 'Quicksand', 'Segoe UI', sans-serif;
        color: #7DA584;
        font-optical-sizing: auto;
        font-weight: <weight>;
        font-style: normal;
    }

    .stButton > button {
        background-color: #7DA584;
        color: white;
        border-radius: 6px;
    }

    .stButton > button:hover {
        background-color: #3b8e68;
        border-color: white    
    }
    </style>
""", unsafe_allow_html=True)

# ========== USU√ÅRIOS ==========
if 'usuarios' not in st.session_state:
    st.session_state.usuarios = {
        "medico": {"senha": "111", "perfil": "m√©dico"},
        "enfermeiro": {"senha": "111", "perfil": "enfermeiro"},
        "paciente": {"senha": "111", "perfil": "paciente"},
        "admin": {"senha": "111", "perfil": "administrador"},
    }

# ========== AUTENTICA√á√ÉO ==========
def autenticar_usuario(username, senha):
    users = st.session_state.usuarios
    if username in users and users[username]["senha"] == senha:
        return users[username]["perfil"]
    return None

def login_page():
    st.image("assets/logo.png", width=600)
    st.subheader("Sistema Inteligente de Diagn√≥stico M√©dico por IA")

    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")

        if submit:
            perfil = autenticar_usuario(username, senha)
            if perfil:
                st.session_state['autenticado'] = True
                st.session_state['usuario'] = username
                st.session_state['perfil'] = perfil
                st.query_params["pagina"] = "inicio"
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos.")

    st.markdown("Ainda n√£o tem cadastro?")
    if st.button("Cadastrar novo usu√°rio"):
        st.query_params["pagina"] = "cadastro"
        st.rerun()

# ========== CADASTRO ==========
def cadastro_page():
    st.image("assets/logo.png", width=120)
    st.title("Cadastro de Novo Usu√°rio")
    st.markdown("Preencha os dados abaixo para criar sua conta.")

    with st.form("cadastro_form"):
        novo_usuario = st.text_input("Nome de usu√°rio")
        nova_senha = st.text_input("Senha", type="password")
        perfil = st.selectbox("Perfil", ["m√©dico", "paciente", "enfermeiro", "t√©cnico-administrativo"])
        cadastrar = st.form_submit_button("Cadastrar")

        if cadastrar:
            if novo_usuario in st.session_state.usuarios:
                st.error("Nome de usu√°rio j√° existe.")
            else:
                st.session_state.usuarios[novo_usuario] = {"senha": nova_senha, "perfil": perfil}
                st.success("Usu√°rio cadastrado com sucesso! Fa√ßa login.")
                st.query_params["pagina"] = "login"
                st.rerun()

    if st.button("Voltar ao login"):
        st.query_params["pagina"] = "login"
        st.rerun()

# ========== P√ÅGINAS ==========
def pagina_inicio():
    st.title("In√≠cio")
    st.markdown("Bem-vindo ao **MediVis√£o**, sua plataforma de apoio ao diagn√≥stico por imagem.")
    st.info(f"Usu√°rio logado: **{st.session_state['usuario']}** ({st.session_state['perfil']})")
    st.image("assets/drawing.png")
    

def pagina_perfil():
    st.title("Perfil do Paciente")
    st.image("assets/persona.png", caption="Paciente")
    st.write("Nome: Jo√£o Batista Fernandes")
    st.write("Idade: 67 anos")
    st.write("√öltima consulta: 15/03/2025")
    st.write("Descri√ß√£o Geral: Aposentado, ex-metal√∫rgico, hipertenso e diab√©tico ")

    st.markdown("### Hist√≥rico M√©dico com Alertas")
    historico = [
        {"data": "2024-12-01", "evento": "Les√£o suspeita detectada", "alerta": True},
        {"data": "2024-06-10", "evento": "Exame de rotina normal", "alerta": False},
        {"data": "2023-11-03", "evento": "Primeira an√°lise automatizada", "alerta": False}
    ]
    for item in historico:
        icon = "‚ö†Ô∏è" if item["alerta"] else "‚úÖ"
        st.markdown(f"{icon} **{item['data']}** ‚Äì {item['evento']}")

    # Bot√µes de a√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Inserir prontu√°rio"):
            # TODO: redirecionar para a p√°gina certa
            st.query_params["pagina_atual"] = "prontuario_medico"
            st.info("Redireciona para a p√°gina do prontu√°rio.")
            st.rerun()
    with col2:
        if st.button("Carregar novos exames"):
            # TODO: redirecionar para a p√°gina certa
            st.query_params["pagina_atual"] = "analise_de_imagens"
            st.info("Redireciona para a p√°gina de an√°lise de imagens por AI")
            st.rerun()        

def dados_pessoais():
    st.title("Perfil do Paciente")
    st.image("assets/persona.png", caption="Paciente")
    st.write("Nome: Jo√£o Batista Fernandes")
    st.write("Idade: 67 anos")
    st.write("√öltima consulta: 15/03/2025")
    st.write("Descri√ß√£o Geral: Aposentado, ex-metal√∫rgico, hipertenso e diab√©tico ")

    st.markdown("### Hist√≥rico M√©dico com Alertas")
    historico = [
        {"data": "2024-12-01", "evento": "Les√£o suspeita detectada", "alerta": True},
        {"data": "2024-06-10", "evento": "Exame de rotina normal", "alerta": False},
        {"data": "2023-11-03", "evento": "Primeira an√°lise automatizada", "alerta": False}
    ]
    for item in historico:
        icon = "‚ö†Ô∏è" if item["alerta"] else "‚úÖ"
        st.markdown(f"{icon} **{item['data']}** ‚Äì {item['evento']}")

        # Bot√µes de a√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Alterar dados cadastrais"):
            st.info("Funcionalidade de edi√ß√£o em constru√ß√£o.")  # Aqui voc√™ pode redirecionar ou abrir um form
    with col2:
        if st.button("Enviar novos exames"):
            st.info("Foi realizado o envio de novos exames para seu m√©dico analisar.")  

def pagina_analise():
    st.title("An√°lise de Imagens por Intelig√™ncia Artificial")
    st.markdown("Fa√ßa upload de imagens para an√°lise m√©dica por IA.")

    imagem = st.file_uploader("Enviar exame (JPG/PNG)", type=["jpg", "jpeg", "png"])
    if imagem:
        st.image(Image.open(imagem), caption="Pr√©via da imagem", use_column_width=True)
        st.success("Imagem carregada com sucesso. Pronta para an√°lise.")

def pagina_resultado():
    st.title("Resultado da An√°lise")
    with st.spinner('Wait for it...'):
        time.sleep(5)
    st.success("Done!")
    st.warning("‚ö†Ô∏è **80% de chance!** ")
    st.image("assets/analise.png", caption="Imagem com realce automatizado.", use_column_width=True)
    st.markdown("### Interpreta√ß√£o")
    st.write("O sistema detectou uma √°rea suspeita. Avalia√ß√£o adicional recomendada.")
    st.markdown("### √Åudio descri√ß√£o")
    st.audio("assets/resultado_analise_audio.mp3")

def pagina_chat():
    st.title("Chat M√©dico-Paciente")

    if 'chat_log' not in st.session_state:
        st.session_state.chat_log = []

    for msg in st.session_state.chat_log:
        st.markdown(f"**{msg['remetente']}**: {msg['mensagem']}")

    with st.form("chat_form", clear_on_submit=True):
        msg = st.text_input("Mensagem")
        enviar = st.form_submit_button("Enviar")
        if enviar and msg:
            st.session_state.chat_log.append({
                "remetente": st.session_state['perfil'].capitalize(),
                "mensagem": msg
            })

def pagina_chat_enfermeiro():
    st.title("Chat M√©dico-Enfermeiro")

    if 'chat_log' not in st.session_state:
        st.session_state.chat_log = []

    for msg in st.session_state.chat_log:
        st.markdown(f"**{msg['remetente']}**: {msg['mensagem']}")

    with st.form("chat_form", clear_on_submit=True):
        msg = st.text_input("Mensagem")
        enviar = st.form_submit_button("Enviar")
        if enviar and msg:
            st.session_state.chat_log.append({
                "remetente": st.session_state['perfil'].capitalize(),
                "mensagem": msg
            })

def pagina_prontuario_medico():
    st.title("Prontu√°rio M√©dico")
    st.markdown("Registro de informa√ß√µes cl√≠nicas e observa√ß√µes m√©dicas do paciente.")

    # Inicializa o prontu√°rio apenas uma vez
    if "prontuario_medico" not in st.session_state:
        st.session_state.prontuario_medico = [
            {
                "data": "2024-12-01 14:30",
                "autor": "Dr. Jo√£o (medico1)",
                "texto": "Paciente relatou dores persistentes no abd√¥men inferior. Solicitado exame de imagem."
            },
            {
                "data": "2025-03-10 09:00",
                "autor": "Dr. Jo√£o (medico1)",
                "texto": "Resultado de tomografia aponta altera√ß√£o compat√≠vel com les√£o tumoral. Encaminhado para oncologia."
            }
        ]

    # Exibir hist√≥rico
    st.markdown("### üóÇ Hist√≥rico do Prontu√°rio")
    for item in reversed(st.session_state.prontuario_medico):
        with st.expander(f"{item['data']} - {item['autor']}"):
            st.markdown(item["texto"])

    # Controle de exibi√ß√£o do formul√°rio
    if "mostrar_form_prontuario" not in st.session_state:
        st.session_state.mostrar_form_prontuario = False

    if st.button("‚úçÔ∏è Nova Anota√ß√£o"):
        st.session_state.mostrar_form_prontuario = True

    # Formul√°rio para nova anota√ß√£o
    if st.session_state.mostrar_form_prontuario:
        with st.form("form_prontuario"):
            nova_entrada = st.text_area("Descreva a evolu√ß√£o cl√≠nica, queixas, condutas, etc.", height=150)
            salvar = st.form_submit_button("Salvar Anota√ß√£o")

            if salvar:
                if nova_entrada.strip() == "":
                    st.warning("Por favor, insira uma anota√ß√£o.")
                else:
                    nova_anotacao = {
                        "data": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
                        "autor": f"{st.session_state['usuario']} ({st.session_state['perfil']})",
                        "texto": nova_entrada
                    }
                    st.session_state.prontuario_medico.append(nova_anotacao)
                    st.success("Anota√ß√£o adicionada com sucesso!")
                    st.session_state.mostrar_form_prontuario = False
                    st.rerun()


def pagina_submeter_exames():
    st.title("Submeter Novos Exames")
    st.markdown(" Fa√ßa upload de exames para que seu m√©dico possa avali√°-los. üì§")
    imagem = st.file_uploader("Envie um exame", type=["jpg", "png", "jpeg"])
    if imagem:
        st.image(imagem, use_column_width=True)
        st.success("Exame enviado com sucesso!")

def pagina_cadastro_usuario():
    st.title("Cadastro e Atualiza√ß√£o de Usu√°rios")
    st.markdown("üë• Cadastre novos m√©dicos, enfermeiros ou pacientes.")

    with st.form("cad_user_form"):
        novo = st.text_input("Novo usu√°rio")
        senha = st.text_input("Senha", type="password")
        perfil = st.selectbox("Perfil", ["m√©dico", "paciente", "enfermeiro"])
        cadastrar = st.form_submit_button("Cadastrar")

        if cadastrar:
            if novo in st.session_state.usuarios:
                st.error("Usu√°rio j√° existe.")
            else:
                st.session_state.usuarios[novo] = {"senha": senha, "perfil": perfil}
                st.success("Usu√°rio cadastrado!")

def pagina_chamados_manutencao():
    st.title("Chamados de Manuten√ß√£o")
    st.markdown("üîß Registrar problemas t√©cnicos ou solicita√ß√µes de manuten√ß√£o.")

    chamado = st.text_area("Descreva o problema")
    if st.button("Abrir chamado"):
        st.success("Chamado registrado com sucesso!")


# ========== ROTAS PRINCIPAIS ==========
if 'autenticado' not in st.session_state:
    st.session_state['autenticado'] = False

# Recuperar p√°gina da URL
pagina_atual = st.query_params.get("pagina", "login")

# L√ìGICA DE NAVEGA√á√ÉO
if not st.session_state['autenticado']:
    if pagina_atual == "cadastro":
        cadastro_page()
    else:
        login_page()
else:
    # MENU DIN√ÇMICO POR PERFIL
    with st.sidebar:
        st.logo("assets/logo-white.png", size='large')

        perfil = st.session_state['perfil']
        paginas_por_perfil = {
            "m√©dico": {
                "In√≠cio": "inicio",
                "Perfil do Paciente": "perfil_do_paciente",
                "An√°lise de Imagens": "analise_de_imagens",
                "Resultado da An√°lise": "resultado_da_analise",
                "Prontu√°rio M√©dico": "prontuario_medico",
                "Chat M√©dico-Paciente": "chat_medico_paciente"
            },
            "enfermeiro": {
                "In√≠cio": "inicio",
                "Perfil do Paciente": "perfil_do_paciente",
                "Prontu√°rio M√©dico": "prontuario_medico",
                "Chat M√©dico-Enfermeiro": "chat_medico_enfermeiro"
            },
            "paciente": {
                "In√≠cio": "inicio",
                "Dados Pessoais": "dados_pessoais",
                "Submeter Novos Exames": "submeter_exames",
                "Chat M√©dico-Paciente": "chat_medico_paciente"
            },
            "t√©cnico-administrativo": {
                "Cadastro de Usu√°rios": "cadastro_usuario",
                "Atualiza√ß√£o de Usu√°rios": "cadastro_usuario",
                "Chamados de Manuten√ß√£o": "chamados_manutencao"
            }
        }

        menu_labels = list(paginas_por_perfil.get(perfil, {}).keys())
        menu_values = list(paginas_por_perfil.get(perfil, {}).values())

        menu = option_menu(
            "MENU",
            menu_labels,
            icons=["house", "person", "upload", "clipboard", "image", "chat"],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"background-color": "white", "padding": "30px"},
                "icon": {"color": "#214c38", "font-size": "18px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin": "5px", "--hover-color": "#a8d7c0"},
                "nav-link-selected": {"background-color": "#7DA584", "color": "white"},
            }
        )

        st.query_params["pagina"] = paginas_por_perfil[perfil][menu]

        st.markdown("---")
        if st.button("Logout", key="logout", help="Sair da conta"):
            st.session_state['autenticado'] = False
            st.session_state['usuario'] = ""
            st.session_state['perfil'] = ""
            st.query_params["pagina"] = "login"
            st.rerun()

        
        # Aplicar a classe CSS via JavaScript injection
        st.markdown("""
            <script>
            const btn = window.parent.document.querySelector('button[kind="primary"][data-testid="baseButton-button"][key="logout"]');
            if (btn) btn.className += " logout-button";
            </script>
        """, unsafe_allow_html=True)    

    # P√ÅGINAS
    if menu == "In√≠cio":
        pagina_inicio()
    elif menu == "Perfil do Paciente":
        pagina_perfil()
    elif menu == "An√°lise de Imagens":
        pagina_analise()
    elif menu == "Resultado da An√°lise":
        pagina_resultado()
    elif menu == "Chat M√©dico-Paciente":
        pagina_chat()
    elif menu == "Chat M√©dico-Enfermeiro":
        pagina_chat_enfermeiro()    
    elif menu == "Prontu√°rio M√©dico":
        pagina_prontuario_medico()
    elif menu == "Submeter Novos Exames":
        pagina_submeter_exames()
    elif menu == "cadastro_usuario":
        pagina_cadastro_usuario()
    elif menu == "chamados_manutencao":
        pagina_chamados_manutencao()
    elif menu == "Dados Pessoais":
        dados_pessoais()        
